name: Selenium Tests on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest  # Usamos windows-latest para ejecutar en un entorno Windows

    steps:
      # Paso 1: Hacer checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar el JDK necesario (asegurándonos de que JDK esté disponible)
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'  # Usa la versión de Java que necesites
          distribution: 'adopt'
          cache: maven

      # Paso 3: Crear el archivo .json con los datos de configuración de las pruebas
      - name: Generate JSON for test configuration
        run: |
          echo {
          echo "  \"testCases\": [" > test-config.json
          echo "    {\"name\": \"Test Case 1\", \"description\": \"Test Description 1\"}," >> test-config.json
          echo "    {\"name\": \"Test Case 2\", \"description\": \"Test Description 2\"}" >> test-config.json
          echo "  ]" >> test-config.json
          echo "}">> test-config.json
        shell: powershell

      # Paso 4: Compilar el proyecto (si es un proyecto Maven)
      - name: Build project using Maven
        run: mvn clean install

      # Paso 5: Ejecutar las pruebas de Selenium (o cualquier otro tipo de pruebas que uses)
      - name: Run Selenium Tests
        run: mvn test

      # Paso 6: Archivar los resultados de las pruebas y el archivo .json
      - name: Archive test results and configuration
        if: success() || failure()  # Este paso se ejecuta incluso si las pruebas fallan
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/test-classes  # Asegúrate de cambiar esta ruta a donde se guardan los resultados
            test-config.json  # El archivo .json generado
.
